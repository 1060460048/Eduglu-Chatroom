<?php

include_once('eduglu_chatroom.features.inc');

/**
 * Implementation of hook_menu().
 */
function eduglu_chatroom_menu() {
  $items = array();
  $items['chatroom'] = array(
    'title' => 'Chatroom',
    'page callback' => 'eduglu_chatroom_load',
    'page arguments' => array(),
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'eduglu_chatroom'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'features',
  );
  $items['eduglu_chatroom/users'] = array(
    'page callback' => 'eduglu_chatroom_get_user',
    'page arguments' => array(2),
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'eduglu_chatroom'),
    'type' => MENU_CALLBACK,
  );
  # Administration
  $items['admin/settings/eduglu-chatroom'] = array(
    'title' => 'Eduglu Chatroom',
    'description' => t('Administer grouproom settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eduglu_chatroom_admin_settings'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

function eduglu_chatroom_load() {
  global $user;

  # Chatroom settings
  $space = spaces_get_space();

  $chats_results = db_query("SELECT uid, date, body
                             FROM eduglu_chatroom_chats
                             WHERE gid = %d
                             ORDER BY date DESC
                             LIMIT 50", $space->group->nid);

  $chats = array();
  while ($row = db_fetch_array($chats_results)) {
    $chats[] = $row;
  }
  $chats = array_reverse($chats);

  # Todo once chats are stored in mysql, join that table as well to get all
  # additional ids that could of been used in the past.
  $results = db_query("SELECT u.uid, u.picture as pic, u.name
    FROM og_uid o
    INNER JOIN users u
    WHERE o.uid = u.uid
    AND o.nid = %d", $space->group->nid);

  $users = array();
  while ($row = db_fetch_object($results)) {
    $row->pic = _create_imagecache_url($row->uid, $row->pic,
      'chatroom_pic', 'connected-users');
    $row->id = $row->uid;
    $users[$row->id] = $row;
  }

  // Replace name with name from the realname module if using that.
  if (module_exists('realname')) {
    $results = db_query("SELECT r.uid, r.realname
      FROM og_uid o
      INNER JOIN realname r
      WHERE o.uid = r.uid
      AND o.nid = %d", $space->group->nid);

    while ($row = db_fetch_object($results)) {
      dpm($row);
      $users[$row->uid]->name = $row->realname;
    }
  }
  $users = array_values($users);

  // Check if the current user is in the array. If not return,
  // you have to be a member of the group to chat.
  // This is a pretty silly restriction but it's a somewhat complicated edge
  // case to account for and this is an experiment.
  $match = TRUE;
  foreach ($users as $u) {
    if ($u->uid === $user->uid) {
      $match = FALSE;
    }
  }
  if ($match) {
    return "You must join this group first before chatting.";
  }

  // Load Settings + initial chat/user information.
  $key = rand(0, getrandmax());
  setcookie('rediskey', $key);
  $settings = array(
    'chatroom' => array(
      'nodejs_url' => variable_get('eduglu_chatroom_nodejs_url', 'http://localhost:3000'),
      'group' => array(
        'name' => $space->group->title,
        'nid' => $space->group->nid,
        'users' => $users,
        'chats' => $chats,
      ),
    )
  );

  drupal_add_js($settings, 'setting');

  // Load CSS from Compass.
  drupal_add_css(drupal_get_path('module', 'eduglu_chatroom') . '/stylesheets/main.css', 'module');
  // Load JS built by Brunch.
  drupal_add_js(drupal_get_path('module', 'eduglu_chatroom') . '/brunch/build/web/js/app.js', 'module');
  // Required by Stitch to start.
  drupal_add_js("require('main')", 'inline');
  // Load Socket.io.
  $load_socketio = '<script src="' . variable_get("eduglu_chatroom_nodejs_url", "http://localhost:3000") . '/socket.io/socket.io.js"></script>';
  drupal_set_html_head($load_socketio);

  // Authenticate this user to the Node.js server.
  eduglu_chatroom_post('newUser', array(
    'uid' => $user->uid,
    'group' => $space->group->nid,
    'key' => $key,
  ));

  return "connecting...";
}

/*
 * Function for posting info to node.js server.
 */
function eduglu_chatroom_post($method, $data) {
  // Set some paramenters for sending request.
  $request_url = variable_get('eduglu_chatroom_nodejs_url', 'http://localhost:3000') . '/drupal';
  $request_headers = array('Content-Type' => 'application/json');
  $request_method = 'POST';
  $request_retry = 3;
  $data['api_key'] = variable_get('eduglu_chatroom_api_key', '');

  $data = array(
    'method' => $method,
    'data' => $data,
  );


  $json_data = drupal_to_js($data);

  // Send the request.
  $result = drupal_http_request($request_url, $request_headers, $request_method, $json_data, $request_retry);
  /* print_r($result);*/
}

function eduglu_chatroom_get_user($uid) {
  static $account;
  if (!isset($account)) {
    if ($cache = cache_get('user_data_' . $uid) && !empty($cache->data)) {
      $account = unserialize($cache->data);
    }
    else {
      $results = db_query("SELECT u.uid, u.picture as pic, u.name
        FROM users u
        WHERE u.uid = %d", $uid);

      $account = array();
      while ($row = db_fetch_object($results)) {
        $row->pic = _create_imagecache_url($row->uid, $row->pic,
          'chatroom_pic', 'connected-users');
        $row->id = $row->uid;
        $account = $row;
      }

      // Replace name with the name from the realname module if using that.
      if (module_exists('realname')) {
        $account->name = db_result(db_query("SELECT realname
          FROM {realname}
          WHERE uid = %d", $uid));
      }
    }
  }

  return $account;
}

/*
 * Implementation of hook_og().
 */
function eduglu_chatroom_og($op, $gid, $uid, $args) {
  $account = user_load($uid);
  $group_node = node_load($gid);
  switch ($op) {
    case 'user insert':
      $method = "addGroupie";
      $data = eduglu_chatroom_get_user($uid);
      $data->group = $gid;
      eduglu_chatroom_post($method, $data);
      break;

    case 'user delete':
      $method = "remGroupie";
      $data->uid = $uid;
      $data->group = $gid;
      eduglu_chatroom_post($method, $data);
      break;
  }
}
// TODO Add user profile integration so when someone updates their name, that change
// will be pushed automagically to all their groups.

/**
 * Admin settings form
 */
function eduglu_chatroom_admin_settings() {
  // Save an api key if one isn't already created.
  if ((variable_get('eduglu_chatroom_api_key', '')) == '') {
    variable_set('eduglu_chatroom_api_key',  md5(rand()));
  }

  $form['eduglu_chatroom_api_key'] = array(
    '#type'          => 'textfield',
    '#title'         => t('API Key'),
    '#default_value' => variable_get('eduglu_chatroom_api_key', md5(rand())),
    '#required' => TRUE,
    '#description' => t('This key is used to validate this Drupal install against the Node.js server. You should copy this key to the config.js file in the eduglu_chatroom directory.'),
  );
  $form['eduglu_chatroom_nodejs_url'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Node.js URL'),
    '#default_value' => variable_get('eduglu_chatroom_nodejs_url', 'http://localhost:3000'),
    '#required' => TRUE,
    '#description' => t('The URL (and port if the port isn\'t set to port 80) for your Node.js server.'),
  );

  return system_settings_form($form);
}


function _create_imagecache_url($uid, $picture, $preset, $class = "") {
  if (isset($picture) && module_exists('imagecache')) {
    $attr = array('class' => $class);
    $attr['class'] .= ' picture-'. $preset;
    if (file_exists($picture)) {
      $image = theme('imagecache', $preset, $picture);
    }
    else {
      $default_image = variable_get('user_picture_default', '');
      $image = theme("imagecache", $preset, $default_image);
    }
    if ($continue) {
      continue;
    }

    $path = 'user/'. $uid;
    return l($image, $path, array('attributes' => $attr,
      'html' => true));
  }
}
